 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int  @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  posts    Post[]     
  comments Comment[]
  likes    Like[]
  shares   Share[]     
  image    String?
  bio      String?
  stories  Story[]
  views    StoryView[]
  notificationReceived Notification[] @relation("NotificationReceived")
  notificationSent Notification[] @relation("NotificationSent")

  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt @default(now())
  followers   Follow [] @relation("Following")
  following   Follow [] @relation("Follower")
}

model Story {
  id          Int @id @default(autoincrement())
  content     String
  image       String?
  authorId    Int
  author      User @relation( fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  views       StoryView[]
}

model StoryView {
  id          Int @id @default(autoincrement())
  storyId     Int
  story       Story @relation( fields: [storyId], references: [id], onDelete: Cascade)
  viewerId    Int
  viewer      User @relation( fields: [viewerId], references: [id], onDelete: Cascade)
  viewAt      DateTime @default(now())
}

model Post {
  id          Int  @id @default(autoincrement())
  title       String
  content     String
  authorId    Int
  author      User  @relation( fields: [authorId], references: [id], onDelete: Cascade)
  images      Image[]
  comments    Comment[]
  likes       Like[]
  shares      Share[]
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt
  isEdited   Boolean @default(false)
  Notifications Notification[]
}

model Image {
  id         Int  @id @default(autoincrement())
  imageUrl   String
  postId     Int
  post       Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Comment {
  id         Int  @id @default(autoincrement())
  content    String
  postId     Int
  post       Post @relation( fields: [postId], references: [id], onDelete: Cascade)
  authorId   Int
  author     User @relation( fields: [authorId], references: [id], onDelete: Cascade)
  parentId   Int?
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isEdited   Boolean @default(false)
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  SAD
  ANGRY
}
model Like {
  id            Int      @id @default(autoincrement())
  reactionType  ReactionType @default(LIKE)
  authorId      Int
  author        User     @relation( fields: [authorId], references: [id], onDelete: Cascade)
  postId        Int
  post          Post     @relation( fields: [postId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([authorId,postId])
}

model Follow {
  id           Int    @id @default(autoincrement())
  followerId   Int
  follower     User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId  Int
  following    User   @relation("Following", fields: [followingId ], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Share {
  id           Int @id @default(autoincrement())
  title        String
  authorId     Int
  author       User @relation( fields: [authorId], references: [id], onDelete: Cascade )
  postId       Int
  post         Post @relation( fields: [postId], references: [id], onDelete: Cascade )
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id           Int       @id @default(autoincrement())
  type         String    
  content      String?   
  authorId     Int       
  author       User      @relation("NotificationReceived", fields: [authorId], references: [id], onDelete: Cascade)
  senderId     Int       
  sender       User      @relation("NotificationSent", fields: [senderId], references: [id], onDelete: Cascade)
  postId       Int?      
  post         Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  isRead       Boolean   @default(false)
  createdAt    DateTime  @default(now())
}
 


