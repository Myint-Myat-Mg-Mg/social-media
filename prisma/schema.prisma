 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int  @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  posts    Post[]     
  comments Comment[]
  likes    Like[]     
  image    String?
  bio      String?

  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt @default(now())
}

model Post {
  id          Int  @id @default(autoincrement())
  title       String
  content     String
  authorId    Int
  author      User  @relation( fields: [authorId], references: [id], onDelete: Cascade)
  image       String?
  comments    Comment[]
  likes       Like[]
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt
}

model Comment {
  id         Int  @id @default(autoincrement())
  content    String
  postId     Int
  post       Post @relation( fields: [postId], references: [id], onDelete: Cascade)
  authorId   Int
  author     User @relation( fields: [authorId], references: [id], onDelete: Cascade)
  parentId   Int?
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  SAD
  ANGRY
}
model Like {
  id            Int      @id @default(autoincrement())
  reactionType  ReactionType @default(LIKE)
  authorId      Int
  author        User     @relation( fields: [authorId], references: [id], onDelete: Cascade)
  postId        Int
  post          Post     @relation( fields: [postId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([authorId,postId])
}